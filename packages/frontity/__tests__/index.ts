/* eslint-disable no-irregular-whitespace */
import execa from "execa";

// We need to set a high timeout because building the docker container and
// running `frontity create` takes a long time.
jest.setTimeout(120000);

/**
 * A helper function to test containers.
 *
 * @param callback - The callback function.
 * @returns - A function ready to be passed to a jest test.
 */
const testContainer = (callback: (containerId: string) => any) => async () => {
  let containerId: string;
  try {
    containerId = await startContainer();
    await callback(containerId);
  } finally {
    await execa.command(`docker rm --force ${containerId}`, {
      stdio: "ignore",
    });
  }
};

beforeAll(async () => {
  // Remove the built output
  await execa.command("rm -rf build", { stdio: "inherit" });

  // Compile the TS source to JS
  await execa.command("npm run build", { stdio: "inherit" });

  // Run `npm pack`
  const { stdout: artifactName } = await execa.command("npm pack", {
    stdio: "pipe", // `pipe` because we want to get the name of the tarball generated by npm pack
  });

  // Build the "base" docker container that contains our CLI
  await execa.command(
    `docker build -t frontity-cli --build-arg ARTIFACT_NAME=${artifactName} .`,
    {
      stdio: "inherit",
    }
  );

  await execa.command(`rm ${artifactName}`);
});

test(
  "print tree",
  testContainer(async (containerId) => {
    await execa.command(
      `docker exec -i ${containerId} node_modules/.bin/frontity create --no-prompt --theme @frontity/mars-theme test-frontity-app`,
      {
        stdio: "inherit",
      }
    );

    let output = await runCommand("ls -a", containerId);
    expect(output).toMatchInlineSnapshot(`
      ".
      ..
      frontity-1.15.0.tgz
      node_modules
      package-lock.json
      package.json
      test-frontity-app"
    `);

    output = await runCommand("tree test-frontity-app/packages/", containerId);
    expect(output).toMatchInlineSnapshot(`
      "test-frontity-app/packages/
      └── mars-theme
          ├── CHANGELOG.md
          ├── README.md
          ├── package.json
          ├── src
          │   ├── components
          │   │   ├── featured-media.js
          │   │   ├── header.js
          │   │   ├── index.js
          │   │   ├── link.js
          │   │   ├── list
          │   │   │   ├── index.js
          │   │   │   ├── list-item.js
          │   │   │   ├── list.js
          │   │   │   └── pagination.js
          │   │   ├── loading.js
          │   │   ├── menu-icon.js
          │   │   ├── menu-modal.js
          │   │   ├── menu.js
          │   │   ├── nav.js
          │   │   ├── page-error.js
          │   │   ├── post.js
          │   │   └── title.js
          │   └── index.js
          └── types.ts

      4 directories, 21 files"
    `);
  })
);

/**
 * Start a container and return its ID.
 *
 * @returns The ID of the container.
 */
const startContainer = async () => {
  // start the container
  const { stdout: containerId } = await execa.command(
    "docker run --rm -i -d frontity-cli node",
    {
      stdio: "pipe",
    }
  );
  return containerId;
};

/**
 *  Run an arbitrary command in a container.
 *
 * @param cmd - The command to execute.
 * @param containerId - The ID of the container.
 *
 * @returns Stdout returned from the command.
 */
const runCommand = async (cmd: string, containerId: string) => {
  const { stdout } = await execa(
    "docker",
    ["exec", "-i", containerId, "sh", "-c", cmd],
    {
      stdio: "pipe",
    }
  );
  return stdout;
};
