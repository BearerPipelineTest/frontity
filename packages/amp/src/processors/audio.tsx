import { Processor, Element } from "@frontity/html2react/types";
import { Packages } from "../../types";
import { Head } from "frontity";
import { httpToHttps } from "../utils";

/**
 * Props for the {@link AMPAudio} component.
 */
interface AudioProps {
  /**
   * The className that might be passed to the component after being
   * having been generated by the emotion babel plugin.
   */
  className: string;

  /**
   * Corresponds to the `autoplay` property of the `<audio>` element.
   */
  autoPlay: string;

  /**
   * Corresponds to the `loop` property of the `<audio>` element.
   */
  loop: string;

  /**
   * Corresponds to the `controls` property of the `<audio>` element.
   */
  controls: string;

  /**
   * Corresponds to the `muted` property of the `<audio>` element.
   */
  muted: string;
}

/**
 * The component that renders an amp-audio component in place of a regular
 * audio and adds the required AMP script for amp-audio in the head.
 *
 * @param props - The props to pass the the amp-audio.
 *
 * @returns A react component.
 */
const AMPAudio: React.FC<AudioProps> = ({
  className,
  autoPlay,
  controls,
  loop,
  muted,
  children,
  ...props
}) => (
  <>
    <Head>
      <script
        // We have to explicitly pass undefined, otherwise the attribute is
        // passed to the DOM like async="true" and AMP does not allow that.
        async={undefined}
        custom-element="amp-audio"
        src="https://cdn.ampproject.org/v0/amp-audio-0.1.js"
      />
    </Head>
    <amp-audio
      class={className}
      {...props}
      {...(autoPlay ? { autoPlay: "" } : undefined)}
      {...(controls ? { controls: "" } : undefined)}
      {...(loop ? { loop: "" } : undefined)}
      {...(muted ? { muted: "" } : undefined)}
    >
      {children}
    </amp-audio>
  </>
);

export const audio: Processor<Element, Packages> = {
  name: "amp-audio",
  test: ({ node }) => node.component === "audio",
  processor: ({ node }) => {
    node.component = AMPAudio;

    // AMP requires that the file is loaded over HTTPS
    node = httpToHttps(node);

    // Create an array that will hold all the child elements of this
    // audio element. We start by adding all child `source` elements (if they
    // exist)
    let children = node.children.filter(
      (child: Element) => child.component === "source"
    );

    // Change http:// to https:// in the child `source` elements
    children = children.map(httpToHttps);

    // Find the first child that has a `placeholder` prop and if it exists add
    // it to the array of children. We only add the first one because there
    // can only be one placeholder element.
    const placeholder = node.children.find((child: Element) =>
      Object.keys(child.props).includes("placeholder")
    );
    placeholder && children.push(placeholder);

    // Find the first child that has a `fallback` prop and if it exists add
    // it to the array of children. We only add the first one because there
    // can only be one fallback element.
    const fallback = node.children.find((child: Element) =>
      Object.keys(child.props).includes("fallback")
    );
    // And if it exists, add it to the array of children
    fallback && children.push(fallback);

    node.children = children;

    return node;
  },
};
